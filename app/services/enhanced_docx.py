import os
from datetime import datetime
from typing import Dict, Any, Optional, Tuple

from app.services.docx_generator import docx_generator_service
from app.services.google_drive import google_drive_service

class EnhancedDocxGeneratorService:
    """
    Enhanced DOCX generator service that integrates with Google Drive.
    This service extends the functionality of the basic DocxGeneratorService
    to allow saving documents directly to Google Drive.
    """
    
    def generate_docx(self, html_content: str) -> bytes:
        """
        Generate a DOCX document from HTML content.
        
        Args:
            html_content: HTML content to convert to DOCX
            
        Returns:
            bytes: The generated DOCX file data
        """
        # Use the existing DocxGeneratorService to generate the DOCX
        return docx_generator_service.generate_docx(html_content)
    
    def get_base64_docx(self, docx_data: bytes) -> str:
        """
        Convert DOCX data to a base64 string for browser download.
        
        Args:
            docx_data: The DOCX file data as bytes
            
        Returns:
            str: Base64-encoded DOCX data
        """
        return docx_generator_service.get_base64_docx(docx_data)
    
    async def save_to_google_drive(self, 
                               html_content: str, 
                               file_name: str,
                               user_id: str,
                               folder_id: Optional[str] = None,
                               create_folder: bool = False,
                               folder_name: Optional[str] = None) -> Dict[str, Any]:
            """
            Generate a DOCX document and save it directly to Google Drive.
            
            Args:
                html_content: HTML content to convert to DOCX
                file_name: Name for the file in Google Drive
                user_id: ID of the user saving the document
                folder_id: Optional ID of folder to save in
                create_folder: Whether to create a new folder
                folder_name: Name of the folder to create (if create_folder is True)
                
            Returns:
                dict: Response with file metadata including sharing links
            """
            try:
                # Generate the DOCX document
                docx_data = self.generate_docx(html_content)
                
                # Ensure file has .docx extension
                if not file_name.lower().endswith('.docx'):
                    file_name += '.docx'
                
                # Create a folder if requested
                if create_folder and folder_name:
                    folder = google_drive_service.create_folder(folder_name, folder_id)
                    folder_id = folder['id']
                
                # Save current datetime for the description
                current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                
                # Upload the file to Google Drive
                file = google_drive_service.upload_file(
                    file_content=docx_data,
                    file_name=file_name,
                    folder_id=folder_id,
                    description=f"Document generated by DocTranslate on {current_time} for user {user_id}"
                )
                
                # Get a shareable link
                file_link = google_drive_service.get_file_link(file['id'])
                
                return {
                    'success': True,
                    'file_id': file['id'],
                    'file_name': file['name'],
                    'web_view_link': file.get('webViewLink', ''),
                    'download_link': file.get('webContentLink', ''),
                    'shareable_link': file_link
                }
                
            except Exception as e:
                print(f"Error saving to Google Drive: {str(e)}")
                return {
                    'success': False,
                    'error': str(e)
                }
    
    async def export_document(self, 
                             html_content: str, 
                             file_name: str,
                             user_id: str,
                             save_to_drive: bool = False,
                             folder_id: Optional[str] = None,
                             create_folder: bool = False,
                             folder_name: Optional[str] = None) -> Dict[str, Any]:
        """
        Export a document with options for both download and Google Drive saving.
        
        Args:
            html_content: HTML content to convert to DOCX
            file_name: Name for the file
            user_id: ID of the user exporting the document
            save_to_drive: Whether to save to Google Drive
            folder_id: Optional ID of folder to save in
            create_folder: Whether to create a new folder
            folder_name: Name of the folder to create (if create_folder is True)
            
        Returns:
            dict: Response with document data and metadata
        """
        try:
            # Generate the DOCX document
            docx_data = self.generate_docx(html_content)
            
            # Ensure file has .docx extension
            if not file_name.lower().endswith('.docx'):
                file_name += '.docx'
            
            # Prepare response
            response = {
                'success': True,
                'file_name': file_name,
                'message': 'Document generated successfully',
                'docx_data': self.get_base64_docx(docx_data)
            }
            
            # If requested, also save to Google Drive
            if save_to_drive:
                drive_result = await self.save_to_google_drive(
                    html_content=html_content,
                    file_name=file_name,
                    user_id=user_id,
                    folder_id=folder_id,
                    create_folder=create_folder,
                    folder_name=folder_name
                )
                
                response['drive_info'] = drive_result
                
                if drive_result['success']:
                    response['message'] += ' and saved to Google Drive'
                else:
                    response['message'] += f", but failed to save to Google Drive: {drive_result.get('error', 'Unknown error')}"
            
            return response
            
        except Exception as e:
            print(f"Document export error: {str(e)}")
            return {
                'success': False,
                'error': str(e)
            }
    
    async def list_drive_folders(self, parent_folder_id: Optional[str] = None) -> Dict[str, Any]:
        """
        List available folders in Google Drive.
        
        Args:
            parent_folder_id: Optional ID of parent folder to list contents from
            
        Returns:
            dict: Response with list of folders
        """
        try:
            folders = google_drive_service.list_folders(parent_folder_id)
            
            return {
                'success': True,
                'message': f'Found {len(folders)} folders',
                'folders': folders
            }
            
        except Exception as e:
            print(f"Error listing Google Drive folders: {str(e)}")
            return {
                'success': False,
                'message': f'Failed to list Google Drive folders: {str(e)}',
                'folders': []
            }


# Create a singleton instance
enhanced_docx_service = EnhancedDocxGeneratorService()